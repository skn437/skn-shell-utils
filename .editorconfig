# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
end_of_line = lf
insert_final_newline = true
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# HTML, CSS, SCSS, Markdown files
[*.{html,css,scss,md}]
indent_size = 2

# JSON, TOML, XML, YAML files
[*.{json,toml,xml,yaml}]
indent_size = 2

# Shell Script, Text & Log files
[*.{sh,txt,log}]
indent_size = 2

# Java, Gradle files
[*.{java,gradle}]
indent_size = 2

# Gradle Wrapper file
[gradlew]
indent_size = 2

# Rust files
[*.rs]
indent_size = 2

# Python files
[*.{py,ipynb}]
indent_size = 2

# C, C++ files
[*.{c,cpp}]
indent_size = 2

# TypeScript, JavaScript files
[*.{ts,tsx,js,jsx}]
indent_size = 2

# Go files
[*.go]
indent_size = 2

# .Net files
[*.{vb,vbx,razor,cake}]
indent_size = 2

# .Net Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# .Net Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# C# files:
[*.{cs,csx}]
indent_size = 2

#
# .Net code style settings:

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Whitespace options
dotnet_style_allow_multiple_blank_lines_experimental = false
dotnet_style_allow_statement_immediately_after_block_experimental = false

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = error
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = error
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = error
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = error
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = error
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = error
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = error
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = error
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# IDE0001: Simplify name
dotnet_diagnostic.IDE0001.severity = suggestion

# IDE0002: Simplify member access
dotnet_diagnostic.IDE0002.severity = suggestion

# IDE0003: Remove `this` or `Me` qualification
dotnet_style_qualification_for_field = true
dotnet_style_qualification_for_property = true
dotnet_style_qualification_for_method = true
dotnet_style_qualification_for_event = true
dotnet_diagnostic.IDE0003.severity = suggestion

# IDE0004: Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = warning

# IDE0005: Using directive is unnecessary
dotnet_diagnostic.IDE0005.severity = suggestion

# IDE0007: Prefer `var` everywhere
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = false
csharp_style_var_elsewhere = false
dotnet_diagnostic.IDE0007.severity = suggestion

# IDE0008: Use explicit type instead of var
dotnet_diagnostic.IDE0008.severity = suggestion

# IDE0010: Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = error

# IDE0011: Add braces
csharp_prefer_braces = when_multiline:warning
# NOTE: We need the below severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201
dotnet_diagnostic.IDE0011.severity = warning

# IDE0016: Use throw expression
csharp_style_throw_expression = true
dotnet_diagnostic.IDE0016.severity = suggestion

# IDE0017: Use object initializers
dotnet_style_object_initializer = true
dotnet_diagnostic.IDE0017.severity = suggestion

# IDE0018: Inline variable declaration
csharp_style_inlined_variable_declaration = true
dotnet_diagnostic.IDE0018.severity = suggestion

# IDE0028: Use collection initializers
dotnet_style_collection_initializer = true
dotnet_diagnostic.IDE0028.severity = suggestion

# IDE0029/IDE0030: Null check can be simplified
dotnet_style_coalesce_expression = true
dotnet_diagnostic.IDE0029.severity = suggestion
dotnet_diagnostic.IDE0030.severity = suggestion

# IDE0031: Use null propagation
dotnet_style_null_propagation = true
dotnet_diagnostic.IDE0031.severity = suggestion

# IDE0032: Use auto property
dotnet_style_prefer_auto_properties = true
dotnet_diagnostic.IDE0032.severity = suggestion

# IDE0033: Use explicitly provided tuple name
dotnet_style_explicit_tuple_names = false
dotnet_diagnostic.IDE0033.severity = suggestion

# IDE0034: Simplify `default` expression
csharp_prefer_simple_default_expression = true
dotnet_diagnostic.IDE0034.severity = suggestion

# IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0035.severity = error

# IDE0036: Order modifiers
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
dotnet_diagnostic.IDE0036.severity = error

# IDE0037: Use inferred member name
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_diagnostic.IDE0037.severity = suggestion

# IDE0039: Use local function instead of lambda
csharp_style_prefer_local_over_anonymous_function = true
dotnet_diagnostic.IDE0039.severity = suggestion

# IDE0040: Add accessibility modifiers
dotnet_style_require_accessibility_modifiers = omit_if_default
dotnet_diagnostic.IDE0040.severity = suggestion

# IDE0041: Use `is` null check
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_diagnostic.IDE0041.severity = suggestion

# IDE0042: Deconstruct variable declaration
csharp_style_deconstructed_variable_declaration = true
dotnet_diagnostic.IDE0042.severity = suggestion

# IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Make field readonly
dotnet_style_readonly_field = true
dotnet_diagnostic.IDE0044.severity = error

# IDE0045: Use conditional expression for assignment
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_diagnostic.IDE0045.severity = suggestion

# IDE0046: Use conditional expression for return
dotnet_style_prefer_conditional_expression_over_return = true
dotnet_diagnostic.IDE0046.severity = suggestion

# IDE0047: Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = suggestion

# IDE0048: Add parentheses for clarity
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_diagnostic.IDE0048.severity = suggestion

# IDE0049: Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = false
dotnet_diagnostic.IDE0049.severity = suggestion

# CONSIDER: Are IDE0051 and IDE0052 too noisy to be warnings for IDE editing scenarios? Should they be made build-only warnings?

# IDE0051: Remove unused private member
dotnet_diagnostic.IDE0051.severity = error

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = error

# IDE0054: Use compound assignment
dotnet_style_prefer_compound_assignment = true
dotnet_diagnostic.IDE0054.severity = suggestion

# IDE0056: Use index operator
csharp_style_prefer_index_operator = true
dotnet_diagnostic.IDE0056.severity = suggestion

# IDE0057: Use range operator
csharp_style_prefer_range_operator = true
dotnet_diagnostic.IDE0057.severity = suggestion

# IDE0058: Remove unused expression value
csharp_style_unused_value_expression_statement_preference = discard_variable
dotnet_diagnostic.IDE0058.severity = warning

# IDE0059: Remove unnecessary value assignment
csharp_style_unused_value_assignment_preference = discard_variable
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0062: Make local function static
csharp_prefer_static_local_function = true
dotnet_diagnostic.IDE0062.severity = error

# IDE0070: Use `System.HashCode.Combine`
dotnet_diagnostic.IDE0070.severity = warning

# IDE0071: Simplify interpolation
dotnet_style_prefer_simplified_interpolation = true
dotnet_diagnostic.IDE0071.severity = suggestion

# IDE0072: Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = error

# IDE0073: File header
dotnet_diagnostic.IDE0073.severity = warning
file_header_template = Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the MIT license.  See License.txt in the project root for license information.

# IDE0074: Use coalesce compound assignment
dotnet_diagnostic.IDE0074.severity = suggestion

# IDE0075: Simplify conditional expression
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_diagnostic.IDE0075.severity = suggestion

# IDE0082: Convert `typeof` to `nameof`
dotnet_diagnostic.IDE0082.severity = warning

# IDE0090: Simplify `new` expression
csharp_style_implicit_object_creation_when_type_is_apparent = true
dotnet_diagnostic.IDE0090.severity = suggestion

# IDE0150: Prefer null check over type check
csharp_style_prefer_null_check_over_type_check = true
dotnet_diagnostic.IDE0150.severity = suggestion

# IDE0160/IDE0161: Use block-scoped/file-scoped namespace
csharp_style_namespace_declarations = file_scoped
dotnet_diagnostic.IDE0160.severity = suggestion
dotnet_diagnostic.IDE0161.severity = suggestion

# IDE0180: Use tuple to swap values
dotnet_diagnostic.IDE0180.severity = warning

# IDE1005: Use conditional delegate call
csharp_style_conditional_delegate_call = true
dotnet_diagnostic.IDE1005.severity = suggestion

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = warning

# dotnet_style_allow_multiple_blank_lines_experimental
dotnet_diagnostic.IDE2000.severity = warning

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = warning

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = warning

# dotnet_style_allow_statement_immediately_after_block_experimental
dotnet_diagnostic.IDE2003.severity = warning

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = warning

#
# C# code style settings:

# Newline settings
# csharp_new_line_before_open_brace = all
csharp_new_line_before_open_brace = false
csharp_new_line_before_else = false
csharp_new_line_before_catch = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_object_initializers = false
csharp_new_line_before_members_in_anonymous_types = false
csharp_new_line_between_query_expression_clauses = false

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Whitespace options
csharp_style_allow_embedded_statements_on_same_line_experimental = false
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error

# Spacing
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = true:silent
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

# Kotlin files
[*.{kt,kts}]
indent_size = 2

#
# Kotlin code style settings:

# Ktlint official code style
ktlint_code_style = ktlint_official
ktlint_standard = enabled

# Removes semicolons
ktlint_standard_no-semi = disabled

# Disallows using wildcard `*` in imports 
ktlint_standard_no-wildcard-imports = disabled

# Enforces naming Kotlin files according to the officially instructed conventions
ktlint_standard_filename = enabled

# Disallows `()` before trailing lambda
ktlint_standard_unnecessary-parentheses-before-trailing-lambda = enabled

# Turns `${}` into `$` in string template if only the variable name is used
ktlint_standard_string-template = enabled
